// SPDX-License-Identifier: MIT

pragma solidity ^0.8.11;

contract lease_contract {
        uint t_now;
        uint private i;
        uint public V_value = 1 ether; //租金(1小時0.1Ether)
        uint public T_time = 5 minutes; //設定出租時間
        uint public time_now;
        uint public start; //將開始時間與結束時間記錄下來
        uint public end; 
        uint public recent =2 * V_value;
        
        bool enable=false; //歸還狀態
        bool public use_right=false; //use_right使用權 false為不可使用 true為可以使用
        bool public re_state;
        address payable public lesser; //lesser出租者
        address payable public lessee; //lessee承租者
        //先付n個時間單位的押金+租金

        //event Time_recent(uint time); //設定出租時長 1min
        //event Value_recent(uint value); //設定租金價格(2 Ether/min)
        enum State { 
            Created,  //創建租約-出租人
            Locked,   //出租人將款項放入合約中
            Paid_Using,    //確認使用權是否開通，確認及付款(租金)，即開始使用
            Use_end, //使用權關閉歸還，若在時間內歸還則退還押金，若超過時間則依規定扣除押金，並自動將使用權關閉無法使用
            Release, //使用時間結束，退還押金或是將押金給出租人
            Inactive //合約結束
        } 
        State public state;
        //payable 有資金轉移的修飾詞
        constructor() payable {
            lesser = payable(msg.sender); 
            //value = msg.value / 2; 
        }
        //
        modifier inState(State state_) {
            if (state != state_) 
                revert ("The function cannot be called at the current state.");
            _;
        }
        modifier inStates(State state1, State state2, State state3) {
            if ((state != state1) || (state != state2) || (state != state3)) 
                revert ("The function cannot be called at the current states.");
            _;
        }
        modifier onlylessee() {
            if (msg.sender != lessee) 
                revert ("Only the buyer can call this function.");
            _;
        }

        modifier onlylesser() {
            if (msg.sender != lesser) 
                revert ("Only the seller can call this function.");  
            _;
        }
        
       /* function setlease(uint _time,uint _value) external onlylesser inState(State.Created){
            emit Time_recent(_time);
            emit Value_recent(_value);
            T_time=1; // _time;
            V_value=2 ether; // _value;
        }*/
        
        //承租人確認是否租約
        function confirmlease() external inState(State.Created) payable {
            require(msg.value == (7 * V_value), "Please send the correct lease amount.");
            lessee = payable(msg.sender); 
            use_right = true; //開啟使用權
            state = State.Locked;
            start = block.timestamp;//確認開始時間
            end = start + T_time;
            
        }
        //確認使用權是否開啟，並付費開始使用
        function confirmuseright() external onlylessee inState(State.Locked) {
            state = State.Paid_Using;
            lesser.transfer(5 * V_value);
        } 
        //歸還使用權，並結束
        function return_right() external onlylessee inState(State.Paid_Using){
            use_right =false;
            state = State.Use_end; 
        }
        function checktime_now() internal returns(uint,bool) {
            
            while(enable == false){
                t_now=block.timestamp;
                //尚未歸還，判斷時間是否超時，true表未超時
                if(t_now <= end){
                    if (use_right == false){
                        //表示已歸還，要準備退回押金
                        state=State.Release;
                        enable=true;
                        return (t_now,enable);
                    }
                    enable=false;
                    return (t_now,enable);
                }
                else{
                    //超過時間
                    if (use_right == false){
                        if(t_now<= end + 60){
                            uint k=1;
                            enable=true;
                            return (t_now,enable);
                        }
                        else if(t_now<= end +120){
                            uint k=2;
                            enable=true;
                        }
                        else{
                            enable=false;
                        }
                        state=State.Release;
                        recent=recent-k*V_value;
                        return (t_now,enable);
                    }
                    else{
                        //state = State.Use_end;
                        if(t_now<= end +120){
                            uint k=2;
                            enable=false;
                        }
                        state=State.Release;
                        recent=recent-k*V_value;
                        enable=true;
                        return (t_now,enable);
                    }
                    use_right=false;
                }        
            }
            return (t_now,enable);
        }
        function showtime() public{
            (time_now,re_state)=checktime_now();
        }
        function payback() public inState(State.Release){
            state=State.Inactive;
            lesser.transfer(2*V_value - recent);
            lessee.transfer(recent);
        }
        

        function abort() external onlylesser inState(State.Created) {
            state = State.Inactive;
            lesser.transfer(address(this).balance);
        }
       
    }